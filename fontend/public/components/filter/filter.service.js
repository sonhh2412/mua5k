'use strict'; angular.module('shopnxApp') .filter('priceVND', function() {return function(input) {if (typeof input != 'undefined') {return input.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1."); } } }) .filter('convertInt', [function() {return function(input) {if (!input) {return input; } else {return parseInt(input); } }; }]) .filter('capitalize', function() {return function(input) {return (!!input) ? input.split(' ').map(function(wrd) {return wrd.charAt(0).toUpperCase() + wrd.substr(1).toLowerCase(); }).join(' ') : ''; } }) .filter('renderHTML', function($sce) {return function(htmlCode){return $sce.trustAsHtml(htmlCode); } }) .filter('timeSum', function() {return function(input) {return parseInt(input.split(' ')[1].replace(':','').replace(':','').replace('.','')) } }) .filter('htmlToPlaintext', function() {return function(text) {return  text ? String(text).replace(/<[^>]+>/gm, '') : ''; }; }) .filter('unique', function() {return function (items, filterOn) {if (filterOn === false) {return items; } if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {var hashCheck = {}, newItems = []; var extractValueToCompare = function (item) {if (angular.isObject(item) && angular.isString(filterOn)) {return item[filterOn]; } else {return item; } }; angular.forEach(items, function (item) {var valueToCheck, isDuplicate = false; for (var i = 0; i < newItems.length; i++) {if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {isDuplicate = true; break; } } if (!isDuplicate) {newItems.push(item); } }); items = newItems; } return items; }; })