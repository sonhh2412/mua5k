'use strict'; angular.module('shopnxApp') .controller('ProductFinishCtrl', function(Auth, $loading, $scope, $stateParams, Product, $location, socket,  $window, Cart, $rootScope, $mdDialog, $interval, CustomerSharing) {$window.scrollTo(0, 0); $rootScope.parmas = {home : false, waiting_result : false, restricted_area : false, customer_share : false, forum : false, help : false, }; $rootScope.tabIndexFN = 1; $rootScope.isPageProduct = false; $rootScope.isHomePage = false; $loading.start('lazy-product'); $scope.stateParams = $stateParams; Auth.isLoggedInAsync(function(cb){$rootScope.isLoggedIn = cb; cb && ($rootScope.getCurrentUser = Auth.getCurrentUser()); $scope.filterUser = function(item){return item.user._id === $rootScope.getCurrentUser._id } }); $scope.currentUser = Auth.getCurrentUser(); $scope.$watch('product',function(product) {if(typeof product != 'undefined'){$scope.url1 = '/api/sharing/get-sharing-by-product/'+$scope.product.id; $scope.url2 = '/api/sharing/get-sharing-by-product-2/'+$scope.product.id; $scope.urlSharingList = $scope.url1; } }); $scope.$watch('currentUser', function(user) {if (typeof user != 'undefined' && Object.keys(user).length != 0){var user_id = user._id; $scope.UpLikeSharing = function(sharing_id) {if (typeof sharing_id != 'undefined') {CustomerSharing.UpLikeSharing.query({sharing_id:sharing_id, user_id:user_id}). $promise.then(function(result){if ($scope.urlSharingList === $scope.url1) $scope.urlSharingList = $scope.url2; else $scope.urlSharingList = $scope.url1; }); } } } }); Product.getProductLottery.get($stateParams).$promise .then(function(result){result ? (result.result.lottery ? ($loading.finish('lazy-product'), $scope.product = result.result, $scope.product.code = _.size($scope.product.code) > 0 ? $scope.product.code.reverse() : [], $scope.countLoop = _.filter($scope.product.code, function(item){return typeof $rootScope.getCurrentUser === 'undefined' ?  true : item.user._id !== $rootScope.getCurrentUser._id }), Product.getSessionSelling.get({id : $scope.product.id }).$promise .then(function(session){$scope.session_selling = session; }) ) : ($location.path("/san-pham/"+$stateParams.slug+"/"+$stateParams.session_id+".html") ) ) : ($location.path("/") ); }) .catch(function(err){$location.path("/"); }); $scope.scrollbarConfig =  {theme: 'dark', autoHideScrollbar: false, setHeight: 155, scrollInertia: 0, axis: 'y', advanced: {updateOnContentResize: false }, scrollButtons: {scrollAmount: 'auto', enable: false } }; var hiddenCodeDiv = function(){angular.element(document.querySelector("#divRnoShow")).hide(); }; var showCodeDiv=function(a){var b=angular.element(document.querySelector("#divRnoShow")),c=angular.element(document.querySelector(".j-custom"));switch(c.removeClass("j-top"),c.removeClass("j-bottom"),a%9){case 0:b.css({top:"8px"}),c.addClass("j-top");break;case 1:b.css({top:"8px"});break;case 2:b.css({top:"50px"});break;case 3:b.css({top:"91px"});break;case 4:b.css({top:"134px"});break;case 5:b.css({top:"176px"});break;case 6:b.css({top:"217px"});break;case 7:b.css({top:"259px"});break;case 8:b.css({top:"259px"}),c.addClass("j-bottom")}angular.element(document.querySelector("#divRnoShow")).show()}; $scope.close_show_code = function(){hiddenCodeDiv(); }; $scope.show_code = function(event, code, user, index){hiddenCodeDiv(); $scope.popCodeList = code; $scope.popUserDetail = user; showCodeDiv(index); }; $scope.tabIndex = 1; $scope.moveToSecondTab = function(){$scope.tabIndex = 1; $window.scrollTo(0, document.querySelector("#div_menu").offsetTop); }; $scope.kMua = function(event, product, amount) {if(! $rootScope.isLoggedIn){$mdDialog.show({templateUrl: '/app/cart/views/login.tpl.html', parent: angular.element(document.body), targetEvent: event, clickOutsideToClose: true, fullscreen: true }) } } ; var expires = new Date(); expires.setSeconds(expires.getSeconds() + 70); var counterTest = $interval(timer, 1); function timer() {var timeDiff = expires - new Date(); if (timeDiff <=0) {$interval.cancel(counterTest); return; } var dateDiff = new Date(timeDiff); var minutes = new Date(timeDiff).getMinutes(); var seconds = new Date(timeDiff).getSeconds(); var milliSeconds = (new Date(timeDiff).getMilliseconds()/10).toFixed(0); minutes = minutes < 10 ? "0" + minutes: minutes; seconds = seconds < 10 ? "0" + seconds: seconds; milliSeconds = milliSeconds < 10 ? "0" + milliSeconds: milliSeconds; $scope.timer = {minutes : minutes, seconds : seconds, milliSeconds : milliSeconds } } var md = new MobileDetect(window.navigator.userAgent); $scope.doTheBack = function() {window.history.back(); } ; $scope.isMobile = false; $scope.isnotMobile = true; if(md.mobile() != null){$scope.isMobile = true; $scope.isnotMobile = false; } }) .directive('userWinner', function($loading, $rootScope, Auth, $window, Product) {return {restrict: 'E', scope: {product: '=', session: '='}, templateUrl: 'app/product/views/product.user.winner.html', link: function(scope, element, attribute) {scope.$watch('product',function(data) {if (typeof data != 'undefined') {scope.count_people = 0; scope.$watch('session', function(session) {if (typeof session != 'undefined' && session.length > 0) {Product.getPeopleBySessionLottery.query({product_id: data.id, session_id: session[0].session_id, }).$promise.then(function(result) {if (result.length > 0) {scope.count_people = result[0].count; } }) } }); scope.product = data; Auth.getUserbyId(data.user_win[0]._id).then(function(user){scope.user = user; }) ; scope.moveToThirdTab = function(){$rootScope.tabIndexFN = 2; $window.scrollTo(0, document.querySelector("#div_allrecord").offsetTop); } } }); } } })